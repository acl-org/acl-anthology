<?xml version='1.0' encoding='UTF-8'?>
<collection id="2025.cgmta">
  <volume id="1" ingest-date="2025-04-08" type="proceedings">
    <meta>
      <booktitle>Proceedings of the 9th Workshop on Constraint Grammar and Finite State NLP</booktitle>
      <editor><first>Trond</first><last>Trosterud</last></editor>
      <editor><first>Linda</first><last>Wiechetek</last></editor>
      <editor><first>Flammie</first><last>Pirinen</last></editor>
      <publisher>University of Tartu Library</publisher>
      <address>Tallinn, Estonia</address>
      <month>march</month>
      <year>2025</year>
      <venue>cgmta</venue>
      <venue>ws</venue>
      <isbn>978-9908-53-113-7</isbn>
    </meta>
    <frontmatter>
      <url hash="80b38ae8">2025.cgmta-1.0</url>
      <bibkey>cgmta-2025-1</bibkey>
    </frontmatter>
    <paper id="1">
      <title>An Annotated Error Corpus for <fixed-case>E</fixed-case>speranto</title>
      <author><first>Eckhard</first><last>Bick</last></author>
      <pages>1–8</pages>
      <abstract>This paper presents and evaluates a new multi-genre error corpus for (written) Esperanto, EspEraro, building on both learner, news and internet data and covering both ordinary spelling errors and real-word errors such as grammatical and word choice errors. Because the corpus has been annotated not only for errors, error types and corrections, but also with Constraint Grammar (CG) tags for part-of-speech, inflection, affixation, syntactic function, dependency and semantic class, it allows users to linguistically contextualize errors and to craft and test CG rules aiming at the recognition and/or correction of the various error types covered in the corpus. The resource was originally created for regression-testing a newly developed spell- and grammar checker, and contains about 75,000 tokens ( 4,000 sentences), with 3,330 tokens annotated for one or more errors and a combined correction suggestion. We discuss the different error types and evaluate their weight in the corpus. Where relevant, we explain the role of Constraint Grammar (CG) in the identification and correction of the individual error types.</abstract>
      <url hash="4eb78af7">2025.cgmta-1.1</url>
      <bibkey>bick-2025-annotated</bibkey>
    </paper>
    <paper id="2">
      <title>Rule-based Surface Realization of <fixed-case>R</fixed-case>omanian Weak Pronouns</title>
      <author><first>Ciprian</first><last>Gerstenberger</last></author>
      <pages>9–18</pages>
      <abstract>Due to its reliance on context and intricate grammatical rules, the Romanian weak pronoun system presents a challenge not only for language learners – both native and non-native speakers – but also for linguistic description and computational processing. The present work addresses the challenges of Romanian weak pronouns from a computational processing perspective. Accordingly, it has three main goals: (1) to present the implementation of a rule-based model for generating contextually accurate surface forms of Romanian weak pronouns, (2) to describe the compilation of a database of relevant inputs for testing surface realization, and (3) to test the effectiveness of the model. This serves as a proof of concept, demonstrating both the transparency and the effectiveness of the model when based on an appropriate linguistic description.</abstract>
      <url hash="13d23e51">2025.cgmta-1.2</url>
      <bibkey>gerstenberger-2025-rule</bibkey>
    </paper>
    <paper id="3">
      <title>Drawing Blue Lines - What can Constraint Grammar do for <fixed-case>GEC?</fixed-case></title>
      <author><first>Linda</first><last>Wiechetek</last></author>
      <author><first>Kevin Brubeck</first><last>Unhammer</last></author>
      <pages>19–27</pages>
      <abstract>This paper presents the application of rule-based methods for Grammatical Error Correction (GEC) across multiple low-resource languages. We describe new functionality using the Constraint Grammar (CG) formalism, designed for detecting and correcting different types of complex grammatical errors in a range of morphologically complex languages. These errors require transformations such as reordering, word additions/deletions, and alternative choices for multiword suggestions. New perspectives are gained from end-to-end-testing – this work aims to clarify the relationship between the command-line interface used by developers and the user interfaces of our grammar checker plug-in for common word processors. We discuss challenges and solutions in correcting complex errors, with examples from languages like Lule Sámi, Irish, and Greenlandic, enabling linguists to adapt these methods in order to provide accurate and context-aware proofing tools for their own languages in mainstream word processors like Microsoft Word, Google Docs or LibreOffice.</abstract>
      <url hash="fefc4672">2025.cgmta-1.3</url>
      <bibkey>wiechetek-unhammer-2025-drawing</bibkey>
    </paper>
    <paper id="4">
      <title>Towards Natural Language Explanations of Constraint Grammar Rules</title>
      <author><first>Daniel</first><last>Swanson</last></author>
      <pages>28–31</pages>
      <abstract>This paper presents a general-purpose parser for static analysis of Constraint Grammar rules (that is, examining only the rules, not potential inputs and outputs) and applies it to the task of translating rules into comprehensible explanations of behavior. An interactive interface for exploring how individual components of each rule contribute to these translations is also presented.</abstract>
      <url hash="cb14e0fb">2025.cgmta-1.4</url>
      <bibkey>swanson-2025-towards</bibkey>
    </paper>
    <paper id="5">
      <title>A <fixed-case>M</fixed-case>ansi <fixed-case>FST</fixed-case> and spellchecker</title>
      <author><first>Jack</first><last>Rueter</last></author>
      <author><first>Csilla</first><last>Horváth</last></author>
      <author><first>Trond</first><last>Trosterud</last></author>
      <pages>32–37</pages>
      <abstract>The article presents a finite state transducer and spellchecker for Mansi, an Ob-Ugric Uralic language spoken in northwestern Siberia. Mansi has a rich but mostly agglutinative morphology, with a morphophonology dominated by sandhi phenomena. With a small set of morphophonological rules (32 twolc rules) and a lexicon consisting of 12,000 Mansi entries and a larger set of propernouns we were able to build a transducer covering 98.9 % of a large (700k) newspaper corpus. Being a part of the GiellaLT infrastructure, the transducer was turned into a spellchecker. The most common spelling error in Mansi is the omission of length marks on vowels, and for the 1000 most common words containing long vowels, the spellchecker was able to give a correct suggestion as top-five in 98.3 % of the cases, and as first suggestion in 91.3 % of the cases.</abstract>
      <url hash="29084667">2025.cgmta-1.5</url>
      <bibkey>rueter-etal-2025-mansi</bibkey>
    </paper>
    <paper id="6">
      <title>A grammatical analyser for <fixed-case>T</fixed-case>okelau</title>
      <author><first>Trond</first><last>Trosterud</last></author>
      <author><first>Arnfinn Muruvik</first><last>Vonen</last></author>
      <pages>38–44</pages>
      <abstract>This article will present a grammatical aunalyser, disambiguator and dependency analysis of Tokelau. The grammatical analyser is written as a finite-state transducer (FST), whereas the disambiguator and dependency analyser are written in Constraint Grammar (CG), both within the GiellaLT infrastructure. Contrary to most languages analyzed within this framework, Being a Polynesian language, Tokelau is a predominantly isolating language, with reduplication and affixation as the main morphological processes. The article will discuss how FST and CG deal with Polynesian languages.</abstract>
      <url hash="061d63bd">2025.cgmta-1.6</url>
      <bibkey>trosterud-vonen-2025-grammatical</bibkey>
    </paper>
    <paper id="7">
      <title>A Grammar-Based Method for Instilling Empirical Dependency Structure in <fixed-case>LLM</fixed-case>s</title>
      <author><first>Olle</first><last>Torstensson</last></author>
      <author><first>Oskar</first><last>Holmström</last></author>
      <pages>45–49</pages>
      <abstract>We investigate whether synthetic pretraining data generated from a formal grammar modeling syntactic dependencies can improve English language models. Building upon the structured pretraining data approach of Papadimitriou and Jurafsky (2023), we develop a grammar that more closely mirrors empirical dependency structures. Our results are negative – this type of pretraining significantly degrades model performance, with both our and their pretraining approach performing worse than no pretraining at all. We analyze potential explanations for these findings and discuss implications for future work on structured-data pretraining.</abstract>
      <url hash="4b1fd764">2025.cgmta-1.7</url>
      <bibkey>torstensson-holmstrom-2025-grammar</bibkey>
    </paper>
    <paper id="8">
      <title>Case error corrections for noun phrases containing deverbal attributive nouns in <fixed-case>G</fixed-case>reenlandic</title>
      <author><first>Judithe</first><last>Denbæk</last></author>
      <pages>50–58</pages>
      <abstract>This paper contains preliminary findings using Constraint Grammar (CG) in seman- tic annotation in a specific type of noun phrases in Greenlandic, in which the at- tributive noun is a nominalized predica- tive verbal stem. The annotation is used in a grammar checker pipeline for the pur- pose of making case error correction sug- gestions.</abstract>
      <url hash="7cb9835d">2025.cgmta-1.8</url>
      <bibkey>denbaek-2025-case</bibkey>
    </paper>
    <paper id="9">
      <title><fixed-case>D</fixed-case>ivvunspell—<fixed-case>F</fixed-case>inite-State Spell-Checking and Correction on Modern Platforms</title>
      <author><first>Flammie A</first><last>Pirinen</last></author>
      <author><first>Sjur Nørstebø</first><last>Moshagen</last></author>
      <pages>59–63</pages>
      <abstract>Spell-checking and correction is one of the key applications of natural language support. Historically, for the biggest, less morphologically complex languages, spell-checking and correction could be implemented by relatively simple means; however, for morphologically complex and low-resource languages, the solutions were often suboptimal. Finite-state methods are the state of the art in rule-based natural language processing and also for spell-checking and correction they have been effectively used. In this article, we show some recent developments of a finite-state spell-checker implementation that works with modern operating systems and platforms.</abstract>
      <url hash="01425cdb">2025.cgmta-1.9</url>
      <bibkey>pirinen-moshagen-2025-divvunspell</bibkey>
    </paper>
  </volume>
</collection>
