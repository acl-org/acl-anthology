<?xml version='1.0' encoding='UTF-8'?>
<collection id="2023.nlposs">
  <volume id="1" ingest-date="2023-12-01" type="proceedings">
    <meta>
      <booktitle>Proceedings of the 3rd Workshop for Natural Language Processing Open Source Software (NLP-OSS 2023)</booktitle>
      <editor><first>Liling</first><last>Tan</last></editor>
      <editor><first>Dmitrijs</first><last>Milajevs</last></editor>
      <editor><first>Geeticka</first><last>Chauhan</last></editor>
      <editor><first>Jeremy</first><last>Gwinnup</last></editor>
      <editor><first>Elijah</first><last>Rippeth</last></editor>
      <publisher>Association for Computational Linguistics</publisher>
      <address>Singapore</address>
      <month>December</month>
      <year>2023</year>
      <url hash="54c9cae1">2023.nlposs-1</url>
      <venue>nlposs</venue>
      <venue>ws</venue>
    </meta>
    <frontmatter>
      <url hash="8d7992c3">2023.nlposs-1.0</url>
      <bibkey>nlposs-ws-2023-natural</bibkey>
    </frontmatter>
    <paper id="1">
      <title>calaman<fixed-case>C</fixed-case>y: A <fixed-case>T</fixed-case>agalog Natural Language Processing Toolkit</title>
      <author><first>Lester James</first><last>Miranda</last><affiliation>Allen Institute for Artificial Intelligence</affiliation></author>
      <pages>1-7</pages>
      <abstract>We introduce calamanCy, an open-source toolkit for constructing natural language processing (NLP) pipelines for Tagalog. It is built on top of spaCy, enabling easy experimentation and integration with other frameworks. calamanCy addresses the development gap by providing a consistent API for building NLP applications and offering general-purpose multitask models with out-of-the-box support for dependency parsing, parts-of-speech (POS) tagging, and named entity recognition (NER). calamanCy aims to accelerate the progress of Tagalog NLP by consolidating disjointed resources in a unified framework.The calamanCy toolkit is available on GitHub: https://github.com/ljvmiranda921/calamanCy.</abstract>
      <url hash="8739f065">2023.nlposs-1.1</url>
      <bibkey>miranda-2023-calamancy</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.1</doi>
    </paper>
    <paper id="2">
      <title><fixed-case>J</fixed-case>ina Embeddings: A Novel Set of High-Performance Sentence Embedding Models</title>
      <author><first>Michael</first><last>Günther</last></author>
      <author><first>Georgios</first><last>Mastrapas</last></author>
      <author><first>Bo</first><last>Wang</last></author>
      <author><first>Han</first><last>Xiao</last><affiliation>Jina AI</affiliation></author>
      <author><first>Jonathan</first><last>Geuter</last></author>
      <pages>8-18</pages>
      <abstract>Jina Embeddings constitutes a set of high-performance sentence embedding models adept at translating textual inputs into numerical representations, capturing the semantics of the text. These models excel in applications like dense retrieval and semantic textual similarity. This paper details the development of Jina Embeddings, starting with the creation of high-quality pairwise and triplet datasets.It underlines the crucial role of data cleaning in dataset preparation, offers in-depth insights into the model training process, and concludes with a comprehensive performance evaluation using the Massive Text Embedding Benchmark (MTEB). Furthermore, to increase the model’s awareness of grammatical negation, we construct a novel training and evaluation dataset of negated and non-negated statements, which we make publicly available to the community.</abstract>
      <url hash="bb731c1e">2023.nlposs-1.2</url>
      <bibkey>gunther-etal-2023-jina</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.2</doi>
      <video href="2023.nlposs-1.2.mp4"/>
    </paper>
    <paper id="3">
      <title>Deepparse : An Extendable, and Fine-Tunable State-Of-The-Art Library for Parsing Multinational Street Addresses</title>
      <author><first>David</first><last>Beauchemin</last></author>
      <pages>19-24</pages>
      <abstract>Segmenting an address into meaningful components, also known as address parsing, is an essential step in many applications from record linkage to geocoding and package delivery. Consequently, a lot of work has been dedicated to develop accurate address parsing techniques, with machine learning and neural network methods leading the state-of-the-art scoreboard. However, most of the work on address parsing has been confined to academic endeavours with little availability of free and easy-to-use open-source solutions.This paper presents Deepparse, a Python open-source, extendable, fine-tunable address parsing solution under LGPL-3.0 licence to parse multinational addresses using state-of-the-art deep learning algorithms and evaluated on over 60 countries. It can parse addresses written in any language and use any address standard. The pre-trained model achieves average 99% parsing accuracies on the countries used for training with no pre-processing nor post-processing needed. Moreover, the library supports fine-tuning with new data to generate a custom address parser.</abstract>
      <url hash="811daf70">2023.nlposs-1.3</url>
      <bibkey>beauchemin-2023-deepparse</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.3</doi>
    </paper>
    <paper id="4">
      <title><fixed-case>P</fixed-case>y<fixed-case>T</fixed-case>hai<fixed-case>NLP</fixed-case>: <fixed-case>T</fixed-case>hai Natural Language Processing in Python</title>
      <author><first>Wannaphong</first><last>Phatthiyaphaibun</last><affiliation>Vidyasirimedhi Institute of Science and Technology</affiliation></author>
      <author><first>Korakot</first><last>Chaovavanich</last></author>
      <author><first>Charin</first><last>Polpanumas</last></author>
      <author><first>Arthit</first><last>Suriyawongkul</last><affiliation>University of Dublin, Trinity College</affiliation></author>
      <author><first>Lalita</first><last>Lowphansirikul</last></author>
      <author><first>Pattarawat</first><last>Chormai</last><affiliation>TU Berlin</affiliation></author>
      <author><first>Peerat</first><last>Limkonchotiwat</last></author>
      <author><first>Thanathip</first><last>Suntorntip</last></author>
      <author><first>Can</first><last>Udomcharoenchaikit</last><affiliation>Vidyasirimedhi Institute of Science and Technology (VISTEC)</affiliation></author>
      <pages>25-36</pages>
      <abstract>We present PyThaiNLP, a free and open-source natural language processing (NLP) library for Thai language implemented in Python. It provides a wide range of software, models, and datasets for Thai language. We first provide a brief historical context of tools for Thai language prior to the development of PyThaiNLP. We then outline the functionalities it provided as well as datasets and pre-trained language models. We later summarize its development milestones and discuss our experience during its development. We conclude by demonstrating how industrial and research communities utilize PyThaiNLP in their work. The library is freely available at https://github.com/pythainlp/pythainlp.</abstract>
      <url hash="927a0747">2023.nlposs-1.4</url>
      <bibkey>phatthiyaphaibun-etal-2023-pythainlp</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.4</doi>
    </paper>
    <paper id="5">
      <title>Empowering Knowledge Discovery from Scientific Literature: A novel approach to Research Artifact Analysis</title>
      <author><first>Petros</first><last>Stavropoulos</last><affiliation>University of Athens</affiliation></author>
      <author><first>Ioannis</first><last>Lyris</last><affiliation>ILSP - “Athena” Research Center</affiliation></author>
      <author><first>Natalia</first><last>Manola</last></author>
      <author><first>Ioanna</first><last>Grypari</last><affiliation>IMIS - “Athena” Research Center</affiliation></author>
      <author><first>Haris</first><last>Papageorgiou</last><affiliation>NATIONAL AND KAPODISTRIAN UNIVERISTY OF ATHENS, ATHENA RESEARCH AND INNOVATION CENTER and ATHENS UNIVERSITY OF ECONOMICS AND BUSINESS</affiliation></author>
      <pages>37-53</pages>
      <abstract>Knowledge extraction from scientific literature is a major issue, crucial to promoting transparency, reproducibility, and innovation in the research community. In this work, we present a novel approach towards the identification, extraction and analysis of dataset and code/software mentions within scientific literature. We introduce a comprehensive dataset, synthetically generated by ChatGPT and meticulously curated, augmented, and expanded with real snippets of scientific text from full-text publications in Computer Science using a human-in-the-loop process. The dataset contains snippets highlighting mentions of the two research artifact (RA) types: dataset and code/software, along with insightful metadata including their Name, Version, License, URL as well as the intended Usage and Provenance. We also fine-tune a simple Large Language Model (LLM) using Low-Rank Adaptation (LoRA) to transform the Research Artifact Analysis (RAA) into an instruction-based Question Answering (QA) task. Ultimately, we report the improvements in performance on the test set of our dataset when compared to other base LLM models. Our method provides a significant step towards facilitating accurate, effective, and efficient extraction of datasets and software from scientific papers, contributing to the challenges of reproducibility and reusability in scientific research.</abstract>
      <url hash="4ea56ffa">2023.nlposs-1.5</url>
      <bibkey>stavropoulos-etal-2023-empowering</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.5</doi>
    </paper>
    <paper id="6">
      <title>Zelda Rose: a tool for hassle-free training of transformer models</title>
      <author><first>Loïc</first><last>Grobol</last><affiliation>École Normale Supérieure and Université Paris Nanterre</affiliation></author>
      <pages>54-58</pages>
      <abstract>Zelda Rose is a command line interface for pretraining transformer-based models. Its purpose is to enable an easy start for users interested in training these ubiquitous models, but unable or unwilling to engage with more comprehensive — but more complex — frameworks and the complex interactions between libraries for managing models, datasets and computations. Training a model requires no code on the user’s part and produce models directly compatible with the HuggingFace ecosystem, allowing quick and easy distribution and reuse. A particular care is given to lowering the cost of maintainability and future-proofing, by making the code as modular as possible and taking advantage of third-party libraries to limit ad-hoc code to the strict minimum.</abstract>
      <url hash="040f3dbe">2023.nlposs-1.6</url>
      <bibkey>grobol-2023-zelda</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.6</doi>
    </paper>
    <paper id="7">
      <title><fixed-case>GPT</fixed-case>4<fixed-case>A</fixed-case>ll: An Ecosystem of Open Source Compressed Language Models</title>
      <author><first>Yuvanesh</first><last>Anand</last></author>
      <author><first>Zach</first><last>Nussbaum</last></author>
      <author><first>Adam</first><last>Treat</last></author>
      <author><first>Aaron</first><last>Miller</last></author>
      <author><first>Richard</first><last>Guo</last><affiliation>NOMIC AI</affiliation></author>
      <author><first>Benjamin</first><last>Schmidt</last></author>
      <author><first>Brandon</first><last>Duderstadt</last><affiliation>Nomic AI</affiliation></author>
      <author><first>Andriy</first><last>Mulyar</last></author>
      <pages>59-64</pages>
      <abstract>Large language models (LLMs) have recently achieved human-level performance on a range of professional and academic benchmarks.The accessibility of these models has lagged behind their performance.State-of-the-art LLMs require costly infrastructure; are only accessible via rate-limited, geo-locked, and censored web interfaces; and lack publicly available code and technical reports.In this paper, we tell the story of GPT4All, a popular open source repository that aims to democratize access to LLMs.We outline the technical details of the original GPT4All model family, as well as the evolution of the GPT4All project from a single model into a fully fledged open source ecosystem.It is our hope that this paper acts as both a technical overview of the original GPT4All models as well as a case study on the subsequent growth of the GPT4All open source ecosystem.</abstract>
      <url hash="f59ab8c6">2023.nlposs-1.7</url>
      <bibkey>anand-etal-2023-gpt4all</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.7</doi>
      <video href="2023.nlposs-1.7.mp4"/>
    </paper>
    <paper id="8">
      <title>Kani: A Lightweight and Highly Hackable Framework for Building Language Model Applications</title>
      <author><first>Andrew</first><last>Zhu</last><affiliation>University of Pennsylvania, University of Pennsylvania</affiliation></author>
      <author><first>Liam</first><last>Dugan</last><affiliation>University of Pennsylvania</affiliation></author>
      <author><first>Alyssa</first><last>Hwang</last><affiliation>University of Pennsylvania, University of Pennsylvania</affiliation></author>
      <author><first>Chris</first><last>Callison-Burch</last><affiliation>University of Pennsylvania</affiliation></author>
      <pages>65-77</pages>
      <abstract>Language model applications are becoming increasingly popular and complex, often including features like tool usage and retrieval augmentation. However, existing frameworks for such applications are often opinionated, deciding for developers how their prompts ought to be formatted and imposing limitations on customizability and reproducibility. To solve this we present Kani: a lightweight, flexible, and model-agnostic open-source framework for building language model applications. Kani helps developers implement a variety of complex features by supporting the core building blocks of chat interaction: model interfacing, chat management, and robust function calling. All Kani core functions are easily overridable and well documented to empower developers to customize functionality for their own needs. Kani thus serves as a useful tool for researchers, hobbyists, and industry professionals alike to accelerate their development while retaining interoperability and fine-grained control.</abstract>
      <url hash="9b53191c">2023.nlposs-1.8</url>
      <bibkey>zhu-etal-2023-kani</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.8</doi>
      <video href="2023.nlposs-1.8.mp4"/>
    </paper>
    <paper id="9">
      <title>Beyond the Repo: A Case Study on Open Source Integration with <fixed-case>GECT</fixed-case>o<fixed-case>R</fixed-case></title>
      <author><first>Sanjna</first><last>Kashyap</last><affiliation>Educational Testing Service</affiliation></author>
      <author><first>Zhaoyang</first><last>Xie</last></author>
      <author><first>Kenneth</first><last>Steimel</last></author>
      <author><first>Nitin</first><last>Madnani</last><affiliation>Educational Testing Service</affiliation></author>
      <pages>78-82</pages>
      <abstract>We present a case study describing our efforts to integrate the open source GECToR code and models into our production NLP pipeline that powers many of Educational Testing Service’s products and prototypes. The paper’s contributions includes a discussion of the issues we encountered during integration and our solutions, the overarching lessons we learned about integrating open source projects, and, last but not least, the open source contributions we made as part of the journey.</abstract>
      <url hash="1a020c71">2023.nlposs-1.9</url>
      <bibkey>kashyap-etal-2023-beyond</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.9</doi>
    </paper>
    <paper id="10">
      <title>Two Decades of the <fixed-case>ACL</fixed-case> <fixed-case>A</fixed-case>nthology: Development, Impact, and Open Challenges</title>
      <author><first>Marcel</first><last>Bollmann</last><affiliation>Linköping University</affiliation></author>
      <author><first>Nathan</first><last>Schneider</last><affiliation>Georgetown University</affiliation></author>
      <author><first>Arne</first><last>Köhn</last></author>
      <author><first>Matt</first><last>Post</last><affiliation>Microsoft and Johns Hopkins University</affiliation></author>
      <pages>83-94</pages>
      <abstract>The ACL Anthology is a prime resource for research papers within computational linguistics and natural language processing, while continuing to be an open-source and community-driven project. Since Gildea et al. (2018) reported on its state and planned directions, the Anthology has seen major technical changes. We discuss what led to these changes and how they impact long-term maintainability and community engagement, describe which open-source data and software tools the Anthology currently provides, and provide a survey of literature that has used the Anthology as a main data source.</abstract>
      <url hash="6e40f7cb">2023.nlposs-1.10</url>
      <attachment type="poster" hash="e54b17ab">2023.nlposs-1.10.Poster.pdf</attachment>
      <bibkey>bollmann-etal-2023-two</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.10</doi>
    </paper>
    <paper id="11">
      <title>nano<fixed-case>T</fixed-case>5: Fast &amp; Simple Pre-training and Fine-tuning of T5 Models with Limited Resources</title>
      <author><first>Piotr</first><last>Nawrot</last></author>
      <pages>95-101</pages>
      <abstract>State-of-the-art language models like T5 have revolutionized the NLP landscape, but their computational demands hinder a large portion of the research community. To address this challenge, we present nanoT5, a specially-optimized PyTorch framework for efficient pre-training and fine-tuning of T5 models. Drawing on insights from optimizer differences and prioritizing efficiency, nanoT5 allows a T5-Base model to be pre-trained on a single GPU in just 16 hours, without any loss in performance. With the introduction of this open-source framework, we hope to widen the accessibility to language modelling research and cater to the community’s demand for more user-friendly T5 (Encoder-Decoder) implementations. We make our contributions, including configurations, codebase, pre-training insights, and pre-trained models, available to the public.</abstract>
      <url hash="aea0dfa4">2023.nlposs-1.11</url>
      <bibkey>nawrot-2023-nanot5</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.11</doi>
      <video href="2023.nlposs-1.11.mp4"/>
    </paper>
    <paper id="12">
      <title><fixed-case>AWARE</fixed-case>-<fixed-case>TEXT</fixed-case>: An Android Package for Mobile Phone Based Text Collection and On-Device Processing</title>
      <author><first>Salvatore</first><last>Giorgi</last></author>
      <author><first>Garrick</first><last>Sherman</last></author>
      <author><first>Douglas</first><last>Bellew</last><affiliation>National Institute of Health</affiliation></author>
      <author><first>Sharath Chandra</first><last>Guntuku</last><affiliation>University of Pennsylvania</affiliation></author>
      <author><first>Lyle</first><last>Ungar</last></author>
      <author><first>Brenda</first><last>Curtis</last><affiliation>National Institute on Drug Abuse/NIH</affiliation></author>
      <pages>102-109</pages>
      <abstract>We present the AWARE-text package, an open-source software package for collecting textual data on Android mobile devices. This package allows for collecting short message service (SMS or text messages) and character-level keystrokes. In addition to collecting this raw data, AWARE-text is designed for on device lexicon processing, which allows one to collect standard textual-based measures (e.g., sentiment, emotions, and topics) without collecting the underlying raw textual data. This is especially important in the case of mobile phones, which can contain sensitive and identifying information. Thus, the AWARE-text package allows for privacy protection while simultaneously collecting textual information at multiple levels of granularity: person (lifetime history of SMS), conversation (both sides of SMS conversations and group chats), message (single SMS), and character (individual keystrokes entered across applications). Finally, the unique processing environment of mobile devices opens up several methodological and privacy issues, which we discuss.</abstract>
      <url hash="59e3c8f1">2023.nlposs-1.12</url>
      <bibkey>giorgi-etal-2023-aware</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.12</doi>
      <video href="2023.nlposs-1.12.mp4"/>
    </paper>
    <paper id="13">
      <title><fixed-case>SOTASTREAM</fixed-case>: A Streaming Approach to Machine Translation Training</title>
      <author><first>Matt</first><last>Post</last><affiliation>Microsoft and Johns Hopkins University</affiliation></author>
      <author><first>Thamme</first><last>Gowda</last><affiliation>Microsoft Translator</affiliation></author>
      <author><first>Roman</first><last>Grundkiewicz</last><affiliation>Microsoft</affiliation></author>
      <author><first>Huda</first><last>Khayrallah</last><affiliation>Microsoft</affiliation></author>
      <author><first>Rohit</first><last>Jain</last></author>
      <author><first>Marcin</first><last>Junczys-Dowmunt</last><affiliation>Microsoft</affiliation></author>
      <pages>110-119</pages>
      <abstract>Many machine translation toolkits make use of a data preparation step wherein raw data is transformed into a tensor format that can be used directly by the trainer. This preparation step is increasingly at odds with modern research and development practices because this process produces a static, unchangeable version of the training data, making common training-time needs difficult (e.g., subword sampling), time-consuming (preprocessing with large data can take days), expensive (e.g., disk space), and cumbersome (managing experiment combinatorics). We propose an alternative approach that separates the generation of data from the consumption of that data. In this approach, there is no separate pre-processing step; data generation produces an infinite stream of permutations of the raw training data, which the trainer tensorizes and batches as it is consumed. Additionally, this data stream can be manipulated by a set of user-definable operators that provide on-the-fly modifications, such as data normalization, augmentation or filtering. We release an open-source toolkit, SOTASTREAM, that implements this approach: https://github.com/marian-nmt/sotastream. We show that it cuts training time, adds flexibility, reduces experiment management complexity, and reduces disk space, all without affecting the accuracy of the trained models.</abstract>
      <url hash="83286ddb">2023.nlposs-1.13</url>
      <bibkey>post-etal-2023-sotastream</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.13</doi>
      <video href="2023.nlposs-1.13.mp4"/>
    </paper>
    <paper id="14">
      <title>An Open-source Web-based Application for Development of Resources and Technologies in Underresourced Languages</title>
      <author><first>Siddharth</first><last>Singh</last></author>
      <author><first>Shyam</first><last>Ratan</last></author>
      <author><first>Neerav</first><last>Mathur</last><affiliation>Dr Bhimrao Ambedkar University, Agra</affiliation></author>
      <author><first>Ritesh</first><last>Kumar</last><affiliation>Dr. Bhimrao Ambedkar University</affiliation></author>
      <pages>120-129</pages>
      <abstract>The paper discusses the Linguistic Field Data Management and Analysis System (LiFE), a new open-source, web-based software that systematises storage, management, annotation, analysis and sharing of linguistic data gathered from the field as well as that crawled from various sources on the web such as YouTube, Twitter, Facebook, Instagram, Blog, Newspaper, Wikipedia, etc. The app supports two broad workflows - (a) the field linguists’ workflow in which data is collected directly from the speakers in the field and analysed further to produce grammatical descriptions, lexicons, educational materials and possibly language technologies; (b) the computational linguists’ workflow in which data collected from the web using automated crawlers or digitised using manual or semi-automatic means, annotated for various tasks and then used for developing different kinds of language technologies. In addition to supporting these workflows, the app provides some additional features as well - (a) it allows multiple users to collaboratively work on the same project via its granular access control and sharing option; (b) it allows the data to be exported to various formats including CSV, TSV, JSON, XLSX, , PDF, Textgrid, RDF (different serialisation formats) etc as appropriate; (c) it allows data import from various formats viz. LIFT XML, XLSX, JSON, CSV, TSV, Textgrid, etc; (d) it allows users to start working in the app at any stage of their work by giving the option to either create a new project from scratch or derive a new project from an existing project in the app.The app is currently available for use and testing on our server (http://life.unreal-tece.co.in/) and its source code has been released under AGPL license on our GitHub repository (https://github.com/unrealtecellp/life). It is licensed under separate, specific conditions for commercial usage.</abstract>
      <url hash="d2a1c991">2023.nlposs-1.14</url>
      <bibkey>singh-etal-2023-open</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.14</doi>
    </paper>
    <paper id="15">
      <title>Rumour Detection in the Wild: A Browser Extension for <fixed-case>T</fixed-case>witter</title>
      <author><first>Andrej</first><last>Jovanovic</last></author>
      <author><first>Björn</first><last>Ross</last><affiliation>University of Edinburgh, University of Edinburgh</affiliation></author>
      <pages>130-140</pages>
      <abstract>Rumour detection, particularly on social media, has gained popularity in recent years. The machine learning community has made significant contributions in investigating automatic methods to detect rumours on such platforms. However, these state-of-the-art (SoTA) models are often deployed by social media companies; ordinary end-users cannot leverage the solutions in the literature for their own rumour detection. To address this issue, we put forward a novel browser extension that allows these users to perform rumour detection on Twitter. Particularly, we leverage the performance from SoTA architectures, which has not been done previously. Initial results from a user study confirm that this browser extension provides benefit. Additionally, we examine the performance of our browser extension’s rumour detection model in a simulated deployment environment. Our results show that additional infrastructure for the browser extension is required to ensure its usability when deployed as a live service for Twitter users at scale.</abstract>
      <url hash="5e1faa5d">2023.nlposs-1.15</url>
      <bibkey>jovanovic-ross-2023-rumour</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.15</doi>
      <video href="2023.nlposs-1.15.mp4"/>
    </paper>
    <paper id="16">
      <title><fixed-case>D</fixed-case>eep<fixed-case>Z</fixed-case>ensols: A Deep Learning Natural Language Processing Framework for Experimentation and Reproducibility</title>
      <author><first>Paul</first><last>Landes</last></author>
      <author><first>Barbara</first><last>Di Eugenio</last><affiliation>University of Illinois, Chicago</affiliation></author>
      <author><first>Cornelia</first><last>Caragea</last><affiliation>University of Illinois, Chicago</affiliation></author>
      <pages>141-146</pages>
      <abstract>Given the criticality and difficulty of reproducing machine learning experiments, there have been significant efforts in reducing the variance of these results. The ability to consistently reproduce results effectively strengthens the underlying hypothesis of the work and should be regarded as important as the novel aspect of the research itself. The contribution of this work is an open source framework that has the following characteristics: a) facilitates reproducing consistent results, b) allows hot-swapping features and embeddings without further processing and re-vectorizing the dataset, c) provides a means of easily creating, training and evaluating natural language processing deep learning models with little to no code changes, and d) is freely available to the community.</abstract>
      <url hash="82a90b49">2023.nlposs-1.16</url>
      <bibkey>landes-etal-2023-deepzensols</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.16</doi>
      <video href="2023.nlposs-1.16.mp4"/>
    </paper>
    <paper id="17">
      <title>Improving <fixed-case>NER</fixed-case> Research Workflows with <fixed-case>S</fixed-case>eq<fixed-case>S</fixed-case>core</title>
      <author><first>Constantine</first><last>Lignos</last><affiliation>Brandeis University</affiliation></author>
      <author><first>Maya</first><last>Kruse</last></author>
      <author><first>Andrew</first><last>Rueda</last></author>
      <pages>147-152</pages>
      <abstract>We describe the features of SeqScore, an MIT-licensed Python toolkit for working with named entity recognition (NER) data.While SeqScore began as a tool for NER scoring, it has been expanded to help with the full lifecycle of working with NER data: validating annotation, providing at-a-glance and detailed summaries of the data, modifying annotation to support experiments, scoring system output, and aiding with error analysis.SeqScore is released via PyPI (https://pypi.org/project/seqscore/) and development occurs on GitHub (https://github.com/bltlab/seqscore).</abstract>
      <url hash="1786b7c1">2023.nlposs-1.17</url>
      <bibkey>lignos-etal-2023-improving</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.17</doi>
      <video href="2023.nlposs-1.17.mp4"/>
    </paper>
    <paper id="18">
      <title>torchdistill Meets Hugging Face Libraries for Reproducible, Coding-Free Deep Learning Studies: A Case Study on <fixed-case>NLP</fixed-case></title>
      <author><first>Yoshitomo</first><last>Matsubara</last><affiliation>Amazon</affiliation></author>
      <pages>153-164</pages>
      <abstract>Reproducibility in scientific work has been becoming increasingly important in research communities such as machine learning, natural language processing, and computer vision communities due to the rapid development of the research domains supported by recent advances in deep learning. In this work, we present a significantly upgraded version of torchdistill, a modular-driven coding-free deep learning framework significantly upgraded from the initial release, which supports only image classification and object detection tasks for reproducible knowledge distillation experiments. To demonstrate that the upgraded framework can support more tasks with third-party libraries, we reproduce the GLUE benchmark results of BERT models using a script based on the upgraded torchdistill, harmonizing with various Hugging Face libraries. All the 27 fine-tuned BERT models and configurations to reproduce the results are published at Hugging Face, and the model weights have already been widely used in research communities. We also reimplement popular small-sized models and new knowledge distillation methods and perform additional experiments for computer vision tasks.</abstract>
      <url hash="fa7e9c1e">2023.nlposs-1.18</url>
      <bibkey>matsubara-2023-torchdistill</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.18</doi>
      <video href="2023.nlposs-1.18.mp4"/>
    </paper>
    <paper id="19">
      <title>Using Captum to Explain Generative Language Models</title>
      <author><first>Vivek</first><last>Miglani</last><affiliation>Meta Platforms</affiliation></author>
      <author><first>Aobo</first><last>Yang</last><affiliation>Facebook</affiliation></author>
      <author><first>Aram</first><last>Markosyan</last><affiliation>Facebook</affiliation></author>
      <author><first>Diego</first><last>Garcia-Olano</last><affiliation>Meta AI</affiliation></author>
      <author><first>Narine</first><last>Kokhlikyan</last><affiliation>Facebook</affiliation></author>
      <pages>165-173</pages>
      <abstract>Captum is a comprehensive library for model explainability in PyTorch, offering a range of methods from the interpretability literature to enhance users’ understanding of PyTorch models. In this paper, we introduce new features in Captum that are specifically designed to analyze the behavior of generative language models. We provide an overview of the available functionalities and example applications of their potential for understanding learned associations within generative language models.</abstract>
      <url hash="8269c5a2">2023.nlposs-1.19</url>
      <bibkey>miglani-etal-2023-using</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.19</doi>
    </paper>
    <paper id="20">
      <title>nerblackbox: A High-level Library for Named Entity Recognition in Python</title>
      <author><first>Felix</first><last>Stollenwerk</last><affiliation>AI Sweden</affiliation></author>
      <pages>174-178</pages>
      <abstract>We present **nerblackbox**, a python library to facilitate the use of state-of-the-art transformer-based models for named entity recognition. It provides simple-to-use yet powerful methods to access data and models from a wide range of sources, for fully automated model training and evaluation as well as versatile model inference. While many technical challenges are solved and hidden from the user by default, **nerblackbox** also offers fine-grained control and a rich set of customizable features. It is thus targeted both at application-oriented developers as well as machine learning experts and researchers.</abstract>
      <url hash="662c8508">2023.nlposs-1.20</url>
      <bibkey>stollenwerk-2023-nerblackbox</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.20</doi>
      <video href="2023.nlposs-1.20.mp4"/>
    </paper>
    <paper id="21">
      <title>News Signals: An <fixed-case>NLP</fixed-case> Library for Text and Time Series</title>
      <author><first>Chris</first><last>Hokamp</last></author>
      <author><first>Demian</first><last>Ghalandari</last></author>
      <author><first>Parsa</first><last>Ghaffari</last></author>
      <pages>179-189</pages>
      <abstract>We present an open-source Python library for building and using datasets where inputs are clusters of textual data, and outputs are sequences of real values representing one or more timeseries signals. The news-signals library supports diverse data science and NLP problem settings related to the prediction of time series behaviour using textual data feeds. For example, in the news domain, inputs are document clusters corresponding to daily news articles about a particular entity, and targets are explicitly associated real-valued timeseries: the volume of news about a particular person or company, or the number of pageviews of specific Wikimedia pages. Despite many industry and research usecases for this class of problem settings, to the best of our knowledge, News Signals is the only open-source library designed specifically to facilitate data science and research settings with natural language inputs and timeseries targets. In addition to the core codebase for building and interacting with datasets, we also conduct a suite of experiments using several popular Machine Learning libraries, which are used to establish baselines for timeseries anomaly prediction using textual inputs.</abstract>
      <url hash="6f9b0fbf">2023.nlposs-1.21</url>
      <bibkey>hokamp-etal-2023-news</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.21</doi>
    </paper>
    <paper id="22">
      <title><fixed-case>P</fixed-case>y<fixed-case>TAIL</fixed-case>: An Open Source Tool for Interactive and Incremental Learning of <fixed-case>NLP</fixed-case> Models with Human in the Loop for Online Data</title>
      <author><first>Shubhanshu</first><last>Mishra</last><affiliation>shubhanshu.com</affiliation></author>
      <author><first>Jana</first><last>Diesner</last><affiliation>UIUC</affiliation></author>
      <pages>190-198</pages>
      <abstract>Online data streams make training machine learning models hard because of distribution shift and new patterns emerging over time. For natural language processing (NLP) tasks that utilize a collection of features based on lexicons and rules, it is important to adapt these features to the changing data. To address this challenge we introduce PyTAIL, a python library, which allows a human in the loop approach to actively train NLP models. PyTAIL enhances generic active learning, which only suggests new instances to label by also suggesting new features like rules and lexicons to label. Furthermore, PyTAIL is flexible enough for users to accept, reject, or update rules and lexicons as the model is being trained. Finally, we simulate the performance of PyTAIL on existing social media benchmark datasets for text classification. We compare various active learning strategies on these benchmarks. The model closes the gap with as few as 10% of the training data. Finally, we also highlight the importance of tracking evaluation metric on remaining data (which is not yet merged with active learning) alongside the test dataset. This highlights the effectiveness of the model in accurately annotating the remaining dataset, which is especially suitable for batch processing of large unlabelled corpora. PyTAIL will be open sourced and available at https://github.com/socialmediaie/pytail.</abstract>
      <url hash="b05091b1">2023.nlposs-1.22</url>
      <bibkey>mishra-diesner-2023-pytail</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.22</doi>
      <video href="2023.nlposs-1.22.mp4"/>
    </paper>
    <paper id="23">
      <title>Antarlekhaka: A Comprehensive Tool for Multi-task Natural Language Annotation</title>
      <author><first>Hrishikesh</first><last>Terdalkar</last><affiliation>Indian Institute of Technology Kanpur</affiliation></author>
      <author><first>Arnab</first><last>Bhattacharya</last><affiliation>IIT Kanpur</affiliation></author>
      <pages>199-211</pages>
      <abstract>One of the primary obstacles in the advancement of Natural Language Processing (NLP) technologies for low-resource languages is the lack of annotated datasets for training and testing machine learning models. In this paper, we present <i>Antarlekhaka</i>, a tool for manual annotation of a comprehensive set of tasks relevant to NLP. The tool is Unicode-compatible, language-agnostic, Web-deployable and supports distributed annotation by multiple simultaneous annotators. The system sports user-friendly interfaces for 8 categories of annotation tasks. These, in turn, enable the annotation of a considerably larger set of NLP tasks. The task categories include two linguistic tasks not handled by any other tool, namely, sentence boundary detection and deciding canonical word order, which are important tasks for text that is in the form of poetry. We propose the idea of <i>sequential annotation</i> based on small text units, where an annotator performs several tasks related to a single text unit before proceeding to the next unit. The research applications of the proposed mode of multi-task annotation are also discussed. Antarlekhaka outperforms other annotation tools in objective evaluation. It has been also used for two real-life annotation tasks on two different languages, namely, Sanskrit and Bengali. The tool is available at <url>https://github.com/Antarlekhaka/code</url></abstract>
      <url hash="5152bb78">2023.nlposs-1.23</url>
      <bibkey>terdalkar-bhattacharya-2023-antarlekhaka</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.23</doi>
    </paper>
    <paper id="24">
      <title><fixed-case>GPTC</fixed-case>ache: An Open-Source Semantic Cache for <fixed-case>LLM</fixed-case> Applications Enabling Faster Answers and Cost Savings</title>
      <author><first>Fu</first><last>Bang</last></author>
      <pages>212-218</pages>
      <abstract>The rise of ChatGPT1 has led to the development of artificial intelligence (AI) applications, particularly those that rely on large language models (LLMs). However, recalling LLM APIs can be expensive, and the response speed may slow down during LLMs’ peak times, causing frustration among developers. Potential solutions to this problem include using better LLM models or investing in more computing resources. However, these options may increase product development costs and decrease development speed. GPTCache2 is an open-source semantic cache that stores LLM responses to address this issue. When integrating an AI application with GPTCache, user queries are first sent to GPTCache for a response before being sent to LLMs like ChatGPT. If GPTCache has the answer to a query, it quickly returns the answer to the user without having to query the LLM. This approach saves costs on API recalls and makes response times much faster. For instance, integrating GPTCache with the GPT service offered by OpenAI can increase response speed 2-10 times when the cache is hit. Moreover, network fluctuations will not affect GPTCache’s response time, making it highly stable. This paper presents GPTCache and its architecture, how it functions and performs, and the use cases for which it is most advantageous.</abstract>
      <url hash="9b1cb769">2023.nlposs-1.24</url>
      <bibkey>bang-2023-gptcache</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.24</doi>
    </paper>
    <paper id="25">
      <title>The Vault: A Comprehensive Multilingual Dataset for Advancing Code Understanding and Generation</title>
      <author><first>Dung Nguyen</first><last>Manh</last></author>
      <author><first>Nam Le</first><last>Hai</last></author>
      <author><first>Anh T. V.</first><last>Dau</last></author>
      <author><first>Anh Minh</first><last>Nguyen</last></author>
      <author><first>Khanh</first><last>Nghiem</last></author>
      <author><first>Jin</first><last>Guo</last></author>
      <author><first>Nghi D. Q.</first><last>Bui</last></author>
      <pages>219-244</pages>
      <url hash="ac0cae15">2023.nlposs-1.25</url>
      <bibkey>manh-etal-2023-vault</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.25</doi>
      <video href="2023.nlposs-1.25.mp4"/>
    </paper>
    <paper id="26">
      <title><fixed-case>SEA</fixed-case>-<fixed-case>LION</fixed-case> (<fixed-case>S</fixed-case>outheast <fixed-case>A</fixed-case>sian Languages In One Network): A Family of <fixed-case>S</fixed-case>outheast <fixed-case>A</fixed-case>sian Language Models</title>
      <author><first>David</first><last>Ong</last><affiliation>AI Singapore</affiliation></author>
      <author><first>Peerat</first><last>Limkonchotiwat</last><affiliation>Vidyasirimedhi Institute of Science and Technology, Thailand</affiliation></author>
      <pages>245-245</pages>
      <url hash="632dc5a1">2023.nlposs-1.26</url>
      <bibkey>tjhi-etal-2023-sea</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.26</doi>
    </paper>
    <paper id="27">
      <title>trl<fixed-case>X</fixed-case>: A Framework for Large Scale Open Source <fixed-case>RLHF</fixed-case></title>
      <author><first>Louis</first><last>Castricato</last><affiliation>EleutherAI</affiliation></author>
      <pages>246-246</pages>
      <abstract>Reinforcement learning from human feedback (RLHF) utilizes human feedback to better align large language models with human preferences via online optimization against a learned reward model. Current RLHF paradigms rely on Proximal Policy Optimization (PPO), which quickly becomes a challenge to implement and scale up to large architectures. To address this difficulty we created the trlX library as a feature-complete open-source framework for RLHF fine-tuning of models up to and exceeding 70 billion parameters. We implemented support for multiple types of distributed training including distributed data parallel, model sharded, as well as tensor, sequential, and pipeline parallelism.</abstract>
      <url hash="b8184f0c">2023.nlposs-1.27</url>
      <bibkey>castricato-2023-trlx</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.27</doi>
    </paper>
    <paper id="28">
      <title>Towards Explainable and Accessible <fixed-case>AI</fixed-case></title>
      <author><first>Brandon</first><last>Duderstadt</last><affiliation>Nomic AI</affiliation></author>
      <author><first>Yuvanesh</first><last>Anand</last><affiliation>Virginia Institute of Technology &amp; Nomic AI</affiliation></author>
      <pages>247-247</pages>
      <abstract>Large language models (LLMs) have recently achieved human-level performance on a range of professional and academic benchmarks. Unfortunately, the explainability and accessibility of these models has lagged behind their performance. State-of-the-art LLMs require costly infrastructure, are only accessible via rate-limited, geo-locked, and censored web interfaces, and lack publicly available code and technical reports. Moreover, the lack of tooling for understanding the massive datasets used to train and produced by LLMs presents a critical challenge for explainability research. This talk will be an overview of Nomic AI’s efforts to address these challenges through its two core initiatives: GPT4All and Atlas</abstract>
      <url hash="5f8b67d2">2023.nlposs-1.28</url>
      <bibkey>duderstadt-anand-2023-towards</bibkey>
      <doi>10.18653/v1/2023.nlposs-1.28</doi>
    </paper>
  </volume>
</collection>
